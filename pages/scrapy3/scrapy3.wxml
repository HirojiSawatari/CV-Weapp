<view>
  <text class="title">Scrapy爬虫+Tkinter爬取天猫热门商品（三）</text>
</view>
<view>
  <text class="sub-title">2016-12-18 00:32</text>
</view>
<view>
  <text class="first">五、GUI构建</text>
</view>
<view>
  <text class="text">为了界面美观，我们使用Tkinter为该爬虫程序构建了一个GUI，即main.py。需包括以下功能：</text>
</view>
<view>
  <text class="second">1、关键词输入与执行爬虫</text>
</view>
<view>
  <text class="text">关键词输入框构建代码如下：</text>
</view>
<view>
  <text class="code"># 关键字输入框  
var = StringVar()  
e = Entry(root, textvariable=var).grid(row=2) </text>
</view>
<view>
  <text class="text">确认按钮构建代码如下：</text>
</view>
<view>
  <text class="code"># 确认按钮  
Button(root, text="开始查询", command=startSpider).grid(row=3)  </text>
</view>
<view>
  <text class="text">爬虫执行函数如下：</text>
</view>
<view>
  <text class="code">def startSpider():  
    # 获取文本框内容  
    good = var.get()  
    # 关键字保存至临时文件  
    temp = open('tempgoods.temp', 'w')  
    temp.write(good.encode(sys.getfilesystemencoding()))  
    temp.close()  
  
    # 清空goods.csv  
    if os.path.exists('goods.csv'):  
        csvfile = open('goods.csv', 'w')  
        csvfile.truncate()  
  
    # 开始爬虫程序  
    os.system("runscrapy.py") </text>
</view>
<view>
  <text class="text">同时，为了让爬虫按照给定的关键字进行爬取，需要让爬虫读取通过该临时文件传递过来的关键字信息。因此对goodspider.py进行以下修改：</text>
</view>
<view>
  <text class="code">temp = open('tempgoods.temp', 'r')  
good = temp.read()  
temp.close()  
# 天猫搜索该商品第一页  
url = "https://list.tmall.com/search_product.htm?q=" + good + "&type=p&vmarket=&spm=875.7931836%2FA.a2227oh.d100&from=mallfp..pc_1_searchbutton"  </text>
</view>
<view>
  <text class="second">2、爬取结果显示</text>
</view>
<view>
  <text class="text">爬取结果通过TreeView控件显示。控件实现代码如下：</text>
</view>
<view>
  <text class="code"># 结果csv表格  
tree = ttk.Treeview(root, show="headings", columns=('店名', '商品名', '购买链接', '价格', '评分', '月交易量', '评论数'))  
# 表格滚动条  
ysb = ttk.Scrollbar(root, orient='vertical', command=tree.yview)  
xsb = ttk.Scrollbar(root, orient='horizontal', command=tree.xview)  
tree.configure(yscroll=ysb.set, xscroll=xsb.set)  
  
tree.column('店名', width=100, anchor='center')  
tree.column('商品名', width=250, anchor='center')  
tree.column('购买链接', width=125, anchor='center')  
tree.column('价格', width=50, anchor='center')  
tree.column('评分', width=65, anchor='center')  
tree.column('月交易量', width=55, anchor='center')  
tree.column('评论数', width=55, anchor='center')  
tree.heading('店名', text='店名')  
tree.heading('商品名', text='商品名')  
tree.heading('购买链接', text='购买链接')  
tree.heading('价格', text='价格')  
tree.heading('评分', text='评分')  
tree.heading('月交易量', text='月交易量')  
tree.heading('评论数', text='评论数')  
vbar = ttk.Scrollbar(root, orient=VERTICAL, command=tree.yview)  
tree.configure(yscrollcommand=vbar.set)  
  
# 初始化表格数据  
refreshTree()  </text>
</view>
<view>
  <text class="second">3、结果表格的刷新</text>
</view>
<view>
  <text class="text">每次爬取结束获取新的信息后需要对结果表格内容进行更新。而且得到的商品信息需要根据各商品的得分进行从大到小的排序。更新函数如下：</text>
</view>
<view>
  <text class="code">def refreshTree():  
    # 清空  
    items = tree.get_children()  
    for item in items:  
        tree.delete(item)  
    # 读取csv  
    if os.path.exists('goods.csv'):  
        csvfile = file('goods.csv', 'rb')  
        if csvfile:  
            lines = []  
            reader = csv.reader(csvfile)  
            i = 0  
            # 转存至数组  
            for line in reader:  
                # 不输出第一行  
                if i > 0:  
                    lines.append(line)  
                i = i + 1  
  
            # 冒泡排序  
            for j in range(len(lines) - 1, 0, -1):  
                for k in range(j):  
                    if string.atof(lines[k][4]) .lt. string.atof(lines[k + 1][4]):  
                        lines[k], lines[k + 1] = lines[k + 1], lines[k]  
            i = 0  
            for line in lines:  
                tree.insert('', i, values=(  
                    line[0].decode(sys.getfilesystemencoding()), line[1].decode(sys.getfilesystemencoding()),  
                    line[2].decode(sys.getfilesystemencoding()), line[3].decode(sys.getfilesystemencoding()),  
                    line[4].decode(sys.getfilesystemencoding()), line[5].decode(sys.getfilesystemencoding()),  
                    line[6].decode(sys.getfilesystemencoding())))  
                i = i + 1  </text>
</view>
<view>
  <text class="second">4、点击表格内商品直接跳转至购买界面</text>
</view>
<view>
  <text class="text">TreeView点击监听代码如下：</text>
</view>
<view>
  <text class="code"># 监听Click  
tree.bind("Double-1", onDBClick)  </text>
</view>
<view>
  <text class="text">跳转函数代码如下：</text>
</view>
<view>
  <text class="code">def onDBClick(event):  
    # 点击跳转天猫  
    item = tree.selection()[0]  
    info = tree.item(item, "values")  
    url = info[2]  
    webbrowser.open_new(url)  </text>
</view>
<view>
  <text class="text">以上就是构建该项目的全部步骤。执行main.py即可实现项目的启动。</text>
</view>